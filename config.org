#+TITLE: config
# #+STARTUP: inlineimages
# #+PROPERTY: header-args :tangle yes :cache yes :results silent :padline no

* config
:PROPERTIES:
:header-args: :tangle config.el
:END:

** font
#+BEGIN_SRC elisp
(setq doom-font (font-spec :family "Fira Mono" :size 18))
#+END_SRC

** quit
#+BEGIN_SRC elisp
(setq confirm-kill-emacs nil)
#+END_SRC

** transparency
#+BEGIN_SRC elisp
(set-frame-parameter (selected-frame) 'alpha '(96 . 96))
(add-to-list 'default-frame-alist '(alpha . (96 . 96)))
(defun toggle-transparency ()
  (interactive)
  (let ((alpha (frame-parameter nil 'alpha)))
    (set-frame-parameter
     nil 'alpha
     (if (eql (cond ((numberp alpha) alpha)
                    ((numberp (cdr alpha)) (cdr alpha))
                    ((numberp (cadr alpha)) (cadr alpha)))
              100)
         '(96 . 96) '(100 . 100)))))
(map! "C-c t" 'toggle-transparency)
#+END_SRC

** self
#+BEGIN_SRC elisp
(map! "C-x C-b" 'switch-to-buffer)
(map! "C-x C-o" 'ace-window)
(global-visual-line-mode)
(setq display-line-numbers-type 'visual)
#+END_SRC

** theme
#+BEGIN_SRC elisp
(setq doom-theme 'doom-dracula)
(setq doom-dark+-blue-modeline t)
#+END_SRC

** sdcv
#+BEGIN_SRC elisp
(set-popup-rule! "*SDCV*" :side 'right :size 60 :modeline nil :select nil :quit t)
(setq sdcv-dictionary-complete-list
      '("朗道英汉字典5.0"
        "朗道汉英字典5.0"))
(map! :leader :m "d" 'sdcv-search-pointer)
#+END_SRC

** org
#+BEGIN_SRC elisp
(after! org
  (setq org-directory "~/Dropbox/org")
  (setq org-journal-dir "~/Dropbox/org/journal/")
  (setq org-journal-date-format "%A, %d %B %Y")
  (setq org-capture-templates
        '(("t" "Todo" entry (file+headline "~/Dropbox/org/gtd.org" "Tasks")
           "* TODO %?\n  %i\n  %a")
          ("h" "Note" entry (file+headline "~/Dropbox/org/note.org" "Notes")
           "* %?\n  %i\n  %a")
          ("j" "Journal" entry (file+datetree "~/Dropbox/org/journal.org")
           "* %?\nEntered on %U\n  %i\n  %a"))))
#+END_SRC

** popup
#+BEGIN_SRC elisp
(set-popup-rule! "*lsp-help*" :side 'bottom :size 60 :modeline nil :select nil :quit t)
#+END_SRC

** clipboard
#+BEGIN_SRC elisp
(defun org-insert-clipboard-image ()
  "Take a screenshot into a time stamped unique-named file in the
same directory as the org-buffer and insert a link to this file."
  (interactive)
  (setq filename
        (concat
         (make-temp-name
          (concat "~/Dropbox/org/"
                  "images/"
                  (file-name-base buffer-file-name)
                  "_"
                  (format-time-string "%Y%m%d_%H%M%S_")) ) ".png"))
  (call-process-shell-command (concat "xclip -selection clipboard -t image/png -o > " filename))
  (insert (concat "[[" filename "]]"))
  (org-display-inline-images))
(map! "C-c i" 'org-insert-clipboard-image)
(after! org
  (setq org-image-actual-width (/ (display-pixel-width) 3)))
#+END_SRC
** modeline
#+BEGIN_SRC elisp
(map! "C-c h" 'hide-mode-line-mode)
#+END_SRC
** dir
#+BEGIN_SRC elisp
(defun dir-org ()
  (interactive)
  (+lookup/file "~/Dropbox/org"))
(map! "C-c o" 'dir-org)
(defun dir-emacs ()
  (interactive)
  (+lookup/file "~/.emacs.d"))
(map! "C-c e" 'dir-emacs)
#+END_SRC

** evil
#+BEGIN_SRC elisp
(setq evil-escape-key-sequence nil)
#+END_SRC
** tramp-zsh
#+BEGIN_EXAMPLE
[[ $TERM == "dumb" ]] && unsetopt zle && PS1='$ ' && return
#+END_EXAMPLE

#+BEGIN_SRC elisp
(setq tramp-ssh-controlmaster-options
      "-o ControlMaster=auto -o ControlPath='tramp.%%C' -o ControlPersist=no")
#+END_SRC
** eaf
#+BEGIN_SRC elisp
(use-package! eaf
  :after evil
  :custom
  (eaf-find-alternate-file-in-dired t)
  :config
  (set-evil-initial-state! 'eaf-mode 'emacs)
  (defun eaf-org-open-file (file &optional link)
    (eaf-open file))

  (map! "C-c b" 'eaf-open-browser)
  (map! "C-c s" 'eaf-open-browser-with-history)

  (eaf-bind-key eaf-open-browser "C-c b" eaf-browser-keybinding)
  (eaf-bind-key dark_mode "M-d" eaf-browser-keybinding)
  (eaf-bind-key sdcv-search-input "M-i" eaf-browser-keybinding)
  (eaf-bind-key eaf-open-bookmark "C-c m" eaf-browser-keybinding)

  (eaf-setq eaf-browser-enable-plugin "false")
  (eaf-setq eaf-browser-enable-javascript "true")
  (eaf-setq eaf-browse-default-zoom "1.5")

  (setq browse-url-browser-function 'eaf-open-browser)
  (defalias 'browse-web #'eaf-open-browser))
#+END_SRC

** lookup
#+BEGIN_SRC elisp
(set-docsets! 'python-mode :add "Python_3")
#+END_SRC

** erime
#+BEGIN_SRC elisp
(use-package! pyim
  :after  liberime-config
  :init
  (setq pyim-title "ㄓ")
  (setq pyim-punctuation-translate-p '(no yes auto))
  (setq evil-input-method "pyim")
  :config
  (setq pyim-page-tooltip 'minibuffer)
  (setq pyim-default-scheme 'rime)
  (setq pyim-page-length 9)
  (setq-default pyim-english-input-switch-functions
                '(pyim-probe-dynamic-english
                  pyim-probe-isearch-mode
                  pyim-probe-program-mode
                  pyim-probe-org-structure-template))
  (after! org
    (map! :g "<XF86Tools>" 'pyim-convert-string-at-point)))
(use-package! liberime-config
  :config
  (setq default-input-method "pyim"))
#+END_SRC

* package
:PROPERTIES:
:header-args: :tangle packages.el
:END:
** header
#+BEGIN_SRC elisp
;; -*- no-byte-compile: t; -*-
;;; packages.el
;;; Examples:
;; (package! some-package)
;; (package! another-package :recipe (:host github :repo "username/repo"))
;; (package! builtin-package :disable t)
#+END_SRC

** elpa
#+BEGIN_SRC elisp
(package! sdcv)
(package! org-journal)
(package! org-noter)
#+END_SRC

** erime
#+BEGIN_SRC elisp
(package! liberime-config
  :recipe (:host github
                 :repo "merrickluo/liberime"
                 :files ("CMakeLists.txt" "Makefile" "src" "liberime-config.el")))

#+END_SRC
** eaf
#+BEGIN_SRC elisp
(package! eaf
  :recipe (:host github
                 :repo "manateelazycat/emacs-application-framework"
                 :files ("*")))
#+END_SRC

** posframe
#+BEGIN_SRC elisp
(package! posframe
  :recipe (:host github
                 :repo "tumashu/posframe"
                 :files ("*")))
#+END_SRC
** emacs-snippets
#+BEGIN_SRC elisp
(package! emacs-snippets :recipe (:host github :repo "hlissner/emacs-snippets" :files ("*")))
#+END_SRC

* autoload
:PROPERTIES:
:header-args: :tangle autoload.el
:END:
