* config
:PROPERTIES:
:header-args: :tangle config.el
:END:
** header
(native-compile-async "~/.emacs.d/.local/straight/build/" 2 t)
#+BEGIN_SRC elisp
(map! "C-x b" 'switch-to-buffer)
(map! "C-x C-b" '+ivy/switch-workspace-buffer)
(map! "C-x C-o" 'ace-window)
(global-visual-line-mode)
(setq confirm-kill-emacs nil)
(setq display-line-numbers-type 'visual)
(setq evil-escape-key-sequence nil)
(use-package! posframe :defer 15)
(setq evil-move-beyond-eol t)
(global-set-key (kbd ",")
                #'(lambda () (interactive) (insert ", ")))
(set-frame-parameter (selected-frame) 'alpha '(95 . 95))
(set-popup-rule! "*lsp-help*"
  :side 'bottom :size 60 :modeline nil :select nil :quit t)
#+END_SRC

** theme
#+BEGIN_SRC elisp
(setq day-theme 'doom-nord-light)
(setq dark-theme 'doom-dark+)
(defun synchronize-theme ()
    (setq hour
        (string-to-number
            (substring (current-time-string) 11 13)))
    (if (member hour (number-sequence 6 18))
        (setq doom-theme day-theme)
        (setq doom-theme dark-theme))
    (doom/reload-theme))
(run-with-timer 0 3600 'synchronize-theme)
#+END_SRC

** font
#+BEGIN_SRC elisp
(defun +my/better-font()
  (interactive)
  ;; english font
  (if (display-graphic-p)
      (progn
        (set-face-attribute 'default nil
                            :font (format "%s:pixelsize=%d" "Fira Code" 17))
        ;; chinese font
        (dolist (charset '(kana han symbol cjk-misc bopomofo))
          (set-fontset-font (frame-parameter nil 'font)
                            charset
                            (font-spec :family "Sarasa Mono SC"))))
    ))

(defun +my|init-font(frame)
  (with-selected-frame frame
    (if (display-graphic-p)
        (+my/better-font))))

(if (and (fboundp 'daemonp) (daemonp))
    (add-hook 'after-make-frame-functions #'+my|init-font)
  (+my/better-font))
#+END_SRC

** sdcv
#+BEGIN_SRC elisp
(set-evil-initial-state! 'sdcv-mode 'emacs)
(set-popup-rule! "*SDCV*"
  :side 'right :size 60 :modeline nil :select nil :quit t :transient t)
(setq sdcv-dictionary-complete-list
      '("朗道英汉字典5.0" "朗道汉英字典5.0"))
#+END_SRC

** org
#+BEGIN_SRC elisp
(setq org-directory "~/Dropbox/org/")
(after! org
  (setq org-image-actual-width (/ (display-pixel-width) 3)))
(after! org-agenda
  (setq org-agenda-time-grid '((daily today require-timed)
                               (300 600 900 1200 1500 1800 2100 2400)
                               "......" "----------------")))
(after! org-capture
  (add-hook 'org-capture-prepare-finalize-hook #'counsel-org-tag)
  (setq org-capture-templates nil)
  (setq org-default-notes-file "inbox.org"
        org-capture-templates
        `(
          ("p" "Protocol")
          ("pp" "Protocol Page" entry
           (file+olp ,(concat org-directory "inbox.org") "Inbox" "Page")
           "* %^{Title}\nSource: %u, %c\n#+BEGIN_QUOTE\n%i\n#+END_QUOTE\n\n\n%?")
          ("pL" "Protocol Link" entry
           (file+olp ,(concat org-directory "inbox.org") "Inbox" "Link")
           "* %? [[%:link][%:description]] \nCaptured On: %U")

          ("n" "Notes")
          ("nm" "ML" entry
           (file+olp ,(concat org-directory "inbox.org") "Notes" "ML")
           "* %?\n  %i\n  %a")

          ("j" "Journal")
          ("jj" "Journal_O"
           entry (file+datetree ,(concat org-directory "journal.org"))
           "* %U - %^{heading} \n %?\n")
          ("jk" "Journal_T" entry (file+datetree ,(concat org-directory "journal.org"))
           "* %U - %^{heading} \n%T\n %?\n")

          ("t" "Todo")
          ("tt" "Todo" entry
           (file ,(concat org-directory "inbox.org"))
           "* %^{Logging for...}\n:PROPERTIES:\n:Created: %U\n:END:\n%i\n%?")
          ("tl" "Todo with link" entry
           (file ,(concat org-directory "inbox.org"))
           "* %^{Logging for...}\n:PROPERTIES:\n:Created: %U\n:Linked: %a\n:END:\n%i\n%?")

          )))
#+END_SRC

** tramp-zsh
#+BEGIN_EXAMPLE
[[ $TERM == "dumb" ]] && unsetopt zle && PS1='$ ' && return
#+END_EXAMPLE

#+BEGIN_SRC elisp
(setq tramp-ssh-controlmaster-options
      "-o ControlMaster=auto -o ControlPath='tramp.%%C' -o ControlPersist=no")
#+END_SRC
** eaf
#+BEGIN_SRC elisp
(use-package! eaf
  :defer 6
  :custom
  (eaf-find-alternate-file-in-dired t)
  :config
  (set-evil-initial-state! 'eaf-mode 'emacs)
  (add-hook 'eaf-mode-hook #'hide-mode-line-mode)

  (defun eaf-org-open-file (file &optional link)
    (eaf-open file))


  (eaf-bind-key eaf-open-browser "C-c b" eaf-browser-keybinding)
  (eaf-bind-key dark_mode "M-d" eaf-browser-keybinding)
  (eaf-bind-key sdcv-search-input "M-i" eaf-browser-keybinding)
  (eaf-bind-key eaf-open-bookmark "C-c m" eaf-browser-keybinding)

  (eaf-setq eaf-browser-enable-plugin "false")
  (eaf-setq eaf-browser-enable-javascript "true")
  (eaf-setq eaf-browser-default-zoom "1.25")

  (defalias 'browse-web #'eaf-open-browser))
#+END_SRC

** rime
#+BEGIN_SRC elisp
(use-package! pyim
  :after  liberime
  :init
  (setq pyim-title "ㄓ")
  (setq pyim-punctuation-translate-p '(no yes auto))
  (setq evil-input-method "pyim")
  :config
  (setq default-input-method "pyim")
  (setq pyim-page-tooltip 'minibuffer)
  (setq pyim-default-scheme 'rime)
  (setq pyim-page-length 9)
  (setq-default pyim-english-input-switch-functions
                '(pyim-probe-dynamic-english
                  pyim-probe-isearch-mode
                  pyim-probe-program-mode
                  pyim-probe-org-structure-template))
  (after! org
    (map! :g "<XF86Tools>" 'pyim-convert-string-at-point)))
(use-package! liberime
  :init
  (setq liberime-user-data-dir "~/.doom.d/dot/rime/"))
#+END_SRC

** google-translate
#+BEGIN_SRC elisp
(use-package! google-translate
  :defer 3
  :config
  (when (and (string-match "0.11.18"
                           (google-translate-version))
             (>= (time-to-seconds)
                 (time-to-seconds
                  (encode-time 0 0 0 23 9 2018))))
    (defun google-translate--get-b-d1 ()
      ;; TKK='427110.1469889687'
      (list 427110 1469889687)))
  )
(setq google-translate-base-url
      "https://translate.google.cn/translate_a/single")
(setq google-translate--tkk-url
      "https://translate.google.cn/")
(setq google-translate-listen-url
      "https://translate.google.cn/translate_tts")
(setq google-translate-backend-method 'curl)
(setq google-translate-pop-up-buffer-set-focus t)
(setq google-translate-default-source-language "en")
(setq google-translate-default-target-language "zh-CN")
#+END_SRC

** latex
#+BEGIN_SRC elisp
(setq org-latex-to-mathml-convert-command
                "java -jar %j -unicode -force -df %o %I"
                org-latex-to-mathml-jar-file
                "~/.doom.d/dot/latex/mathtoweb.jar")
#+END_SRC

** defun
#+BEGIN_SRC elisp
(defun just/org-time-stamp ()
  (interactive)
  (let ((current-prefix-arg 4))
    (call-interactively 'org-time-stamp)))
(defun just/eaf-browser ()
  (interactive)
  (setq browse-url-browser-function 'eaf-open-browser))
(defun just/xdg-browser ()
  (interactive)
  (setq browse-url-browser-function 'browse-url-chromium))
(defun just/org ()
  (interactive)
  (+lookup/file "~/Dropbox/org/"))
(defun just/emacs ()
  (interactive)
  (+lookup/file "~/.emacs.d/"))
(defun just/emacs-repos ()
  (interactive)
  (+lookup/file "~/.emacs.d/.local/straight/repos/"))
(defun just/transparency (value)
  (interactive (list (read-number "Transparency Value 0 - 100 opaque: " 100)))
  (set-frame-parameter (selected-frame) 'alpha value))
(defun org-insert-clipboard-image ()
  (interactive)
  (setq filename
        (concat
         (make-temp-name
          (concat "~/Dropbox/org/images/"
                  (file-name-base buffer-file-name)
                  "_"
                  (format-time-string "%Y%m%d_%H%M%S_")) ) ".png"))
  (call-process-shell-command (concat "xclip -selection clipboard -t image/png -o > " filename))
  (insert (concat "[[" filename "]]"))
  (org-display-inline-images))
#+END_SRC
** key
#+BEGIN_SRC elisp
(map! :leader
      (:prefix ("j" . "just")
        "b" 'eaf-open-browser-with-history
        "B" 'eaf-open-browser
        "c" 'just/xdg-browser
        "C" 'just/eaf-browser
        "d" 'just/emacs-repos
        "e" 'just/emacs
        "g" 'google-translate-at-point
        "G" 'google-translate-at-point-reverse
        "i" 'org-insert-clipboard-image
        "j" 'sdcv-search-pointer
        "J" 'sdcv-search-input
        "k" 'org-capture
        "K" 'org-agenda
        "o" 'just/org
        "p" 'pangu-spacing-space-current-buffer
        "s" 'just/org-time-stamp
        "S" 'org-time-stamp
        "t" 'just/transparency
        ))
#+END_SRC

#+RESULTS:
: just/transparency

* package
:PROPERTIES:
:header-args: :tangle packages.el
:END:
** header
#+BEGIN_SRC elisp
;; -*- no-byte-compile: t; -*-
(package! sdcv)
(package! emojify)
#+END_SRC

** rime
#+BEGIN_SRC elisp
(package! liberime
  :recipe (:host github
                 :repo "merrickluo/liberime"
                 :files ("CMakeLists.txt" "Makefile" "src" "liberime.el" "liberime-config.el")))
#+END_SRC
** eaf
#+BEGIN_SRC elisp
(package! eaf
  :recipe (:host github
                 :repo "manateelazycat/emacs-application-framework"
                 :files ("*")))
#+END_SRC

** posframe
#+BEGIN_SRC elisp
(package! posframe
  :disable t
  :recipe (:host github
                 :repo "tumashu/posframe"
                 :files ("*")))
#+END_SRC
** emacs-snippets
#+BEGIN_SRC elisp
(package! emacs-snippets :recipe (:host github :repo "hlissner/emacs-snippets" :files ("*")))
#+END_SRC

** google-translate
#+BEGIN_SRC elisp
(package! google-translate
  :recipe (:host github :repo "f279801/google-translate" :branch "#98"))
#+END_SRC
