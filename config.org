#+TITLE: config
# #+STARTUP: inlineimages
# #+PROPERTY: header-args :tangle yes :cache yes :results silent :padline no

* config
:PROPERTIES:
:header-args: :tangle config.el
:END:

** hook
#+BEGIN_SRC elisp
(add-hook! 'python-shell-send-buffer 'comint-clear-buffer)
#+END_SRC

** font
#+BEGIN_SRC elisp
(defun +my/better-font()
  (interactive)
  ;; english font
  (if (display-graphic-p)
      (progn
        (set-face-attribute 'default nil :font (format "%s:pixelsize=%d" "Fira Code" 17)) ;; 11 13 17 19 23
        ;; chinese font
        (dolist (charset '(kana han symbol cjk-misc bopomofo))
          (set-fontset-font (frame-parameter nil 'font)
                            charset
                            (font-spec :family "Sarasa Mono SC")))) ;; 14 16 20 22 28
    ))

(defun +my|init-font(frame)
  (with-selected-frame frame
    (if (display-graphic-p)
        (+my/better-font))))

(if (and (fboundp 'daemonp) (daemonp))
    (add-hook 'after-make-frame-functions #'+my|init-font)
  (+my/better-font))
#+END_SRC

** quit
#+BEGIN_SRC elisp
(setq confirm-kill-emacs nil)
#+END_SRC

** transparency
#+BEGIN_SRC elisp
(set-frame-parameter (selected-frame) 'alpha '(95 . 95))
(defun transparency (value)
  (interactive (list (read-number "Transparency Value 0 - 100 opaque: " 100)))
  (set-frame-parameter (selected-frame) 'alpha value))
#+END_SRC

** self
(native-compile-async "~/.emacs.d/.local/straight/build/" 2 t)
#+BEGIN_SRC elisp
(map! "C-x b" 'switch-to-buffer)
(map! "C-x C-b" '+ivy/switch-workspace-buffer)
(map! "C-x C-o" 'ace-window)
(global-visual-line-mode)
(setq display-line-numbers-type 'visual)
#+END_SRC

#+RESULTS:
: visual

** theme
#+BEGIN_SRC elisp
(setq doom-theme 'doom-dark+)
#+END_SRC

** sdcv
#+BEGIN_SRC elisp
(set-popup-rule! "*SDCV*" :side 'right :size 60 :modeline nil :select nil :quit t :transient t)
(setq sdcv-dictionary-complete-list
      '("朗道英汉字典5.0"
        "朗道汉英字典5.0"))
#+END_SRC

#+RESULTS:
: sdcv-search-pointer

** org
#+BEGIN_SRC elisp
(defun org-journal-find-location ()
  ;; Open today's journal, but specify a non-nil prefix argument in order to
  ;; inhibit inserting the heading; org-capture will insert the heading.
  (org-journal-new-entry t)
  ;; Position point on the journal's top-level heading so that org-capture
  ;; will add the new entry as a child entry.
  (goto-char (point-min)))
(setq org-directory "~/Dropbox/org"
      org-journal-dir "~/Dropbox/org/journal/"
      org-journal-date-format "%A, %d %B %Y"
      org-journal-enable-agenda-integration t
      org-agenda-files (ignore-errors (directory-files org-directory t "^\\(.*\\|ref\\)\\.org$" t))
      )
(after! org
  (setq org-directory "~/Dropbox/org"
        org-journal-dir "~/Dropbox/org/journal/"
        org-journal-date-format "%A, %d %B %Y"
        org-journal-enable-agenda-integration t
        org-agenda-files (ignore-errors (directory-files org-directory t "^\\(.*\\|ref\\)\\.org$" t))
        )
  (setq org-capture-templates
        '(("t" "Todo" entry (file+headline "~/Dropbox/org/gtd.org" "Tasks")
           "* TODO %?\n  %i\n  %a")
          ("h" "Note" entry (file+headline "~/Dropbox/org/note.org" "Notes")
           "* %?\n  %i\n  %a")
          ("j" "Journal entry" entry (function org-journal-find-location)
           "* %(format-time-string org-journal-time-format)%^{Title}\n%i%?")
          )))
(global-set-key (kbd ",")
                #'(lambda ()
                    (interactive)
                    (insert ", ")))
(setq org-agenda-time-grid '((daily today require-timed)
                             (300 600 900 1200 1500 1800 2100 2400)
                             "......" "----------------"))
(add-to-list 'auto-mode-alist '("\\.\\(org\\|org_archive\\|txt\\)$" . org-mode))
#+END_SRC

#+RESULTS:

** popup
#+BEGIN_SRC elisp
(set-popup-rule! "*lsp-help*" :side 'bottom :size 60 :modeline nil :select nil :quit t)
#+END_SRC

** clipboard
#+BEGIN_SRC elisp
(defun org-insert-clipboard-image ()
  "Take a screenshot into a time stamped unique-named file in the
same directory as the org-buffer and insert a link to this file."
  (interactive)
  (setq filename
        (concat
         (make-temp-name
          (concat "~/Dropbox/org/images/"
                  (file-name-base buffer-file-name)
                  "_"
                  (format-time-string "%Y%m%d_%H%M%S_")) ) ".png"))
  (call-process-shell-command (concat "xclip -selection clipboard -t image/png -o > " filename))
  (insert (concat "[[" filename "]]"))
  (org-display-inline-images))
(map! "C-c i" 'org-insert-clipboard-image)
(after! org
  (setq org-image-actual-width (/ (display-pixel-width) 3)))
#+END_SRC
** modeline
#+BEGIN_SRC elisp
(map! "C-c h" 'hide-mode-line-mode)
#+END_SRC
** dir
#+BEGIN_SRC elisp
(defun dir-org ()
  (interactive)
  (+lookup/file "~/Dropbox/org"))
(defun dir-emacs ()
  (interactive)
  (+lookup/file "~/.emacs.d"))
(defun dir-emacs-repos ()
  (interactive)
  (+lookup/file "~/.emacs.d/.local/straight/repos"))
#+END_SRC

** evil
#+BEGIN_SRC elisp
(setq evil-escape-key-sequence nil)
#+END_SRC
** tramp-zsh
#+BEGIN_EXAMPLE
[[ $TERM == "dumb" ]] && unsetopt zle && PS1='$ ' && return
#+END_EXAMPLE

#+BEGIN_SRC elisp
(setq tramp-ssh-controlmaster-options
      "-o ControlMaster=auto -o ControlPath='tramp.%%C' -o ControlPersist=no")
#+END_SRC
** posframe
#+BEGIN_SRC elisp
(use-package! posframe
  :defer 15)

#+END_SRC
** eaf
#+BEGIN_SRC elisp
(use-package! eaf
  :defer 60
  :custom
  (eaf-find-alternate-file-in-dired t)
  :config
  (set-evil-initial-state! 'eaf-mode 'emacs)
  (add-hook 'eaf-mode-hook #'hide-mode-line-mode)

  (defun eaf-org-open-file (file &optional link)
    (eaf-open file))

  (map! "C-c b" 'eaf-open-browser)
  (map! "C-c s" 'eaf-open-browser-with-history)

  (eaf-bind-key eaf-open-browser "C-c b" eaf-browser-keybinding)
  (eaf-bind-key dark_mode "M-d" eaf-browser-keybinding)
  (eaf-bind-key sdcv-search-input "M-i" eaf-browser-keybinding)
  (eaf-bind-key eaf-open-bookmark "C-c m" eaf-browser-keybinding)

  (eaf-setq eaf-browser-enable-plugin "false")
  (eaf-setq eaf-browser-enable-javascript "true")
  (eaf-setq eaf-browser-default-zoom "1.25")

  (setq browse-url-browser-function 'eaf-open-browser)
  (defalias 'browse-web #'eaf-open-browser))
#+END_SRC

** lookup
#+BEGIN_SRC elisp
(set-docsets! 'python-mode :add "Python_3")
#+END_SRC

** rime
#+BEGIN_SRC elisp
(use-package! pyim
  :after  liberime
  :init
  (setq pyim-title "ㄓ")
  (setq pyim-punctuation-translate-p '(no yes auto))
  (setq evil-input-method "pyim")
  :config
  (setq default-input-method "pyim")
  (setq pyim-page-tooltip 'minibuffer)
  (setq pyim-default-scheme 'rime)
  (setq pyim-page-length 9)
  (setq-default pyim-english-input-switch-functions
                '(pyim-probe-dynamic-english
                  pyim-probe-isearch-mode
                  pyim-probe-program-mode
                  pyim-probe-org-structure-template))
  (after! org
    (map! :g "<XF86Tools>" 'pyim-convert-string-at-point)))
(use-package! liberime
  :init
  (setq liberime-user-data-dir "~/.doom.d/dot/rime/"))
#+END_SRC

** google-translate
#+BEGIN_SRC elisp
(use-package! google-translate
  :defer 3
  :config
  (when (and (string-match "0.11.18"
                           (google-translate-version))
             (>= (time-to-seconds)
                 (time-to-seconds
                  (encode-time 0 0 0 23 9 2018))))
    (defun google-translate--get-b-d1 ()
      ;; TKK='427110.1469889687'
      (list 427110 1469889687)))
  )
(setq google-translate-base-url
      "http://translate.google.cn/translate_a/single")
(setq google-translate--tkk-url
      "http://translate.google.cn/")
(setq google-translate-listen-url
      "http://translate.google.cn/translate_tts")
(setq google-translate-backend-method 'curl)
(setq google-translate-pop-up-buffer-set-focus t)
(setq google-translate-default-source-language "en")
(setq google-translate-default-target-language "zh-CN")
#+END_SRC

#+RESULTS:
: zh-CN

** key
#+BEGIN_SRC elisp
(setq evil-move-beyond-eol t)
(defun just/org-time-stamp ()
  (interactive)
  (let ((current-prefix-arg 4))
    (call-interactively 'org-time-stamp)
    ))
(map! :leader
      (:prefix ("j" . "just")
        "d" 'dir-emacs-repos
        "e" 'dir-emacs
        "I" 'org-time-stamp
        "i" 'just/org-time-stamp
        "j" 'sdcv-search-pointer
        "J" 'sdcv-search-input
        "k" 'pangu-spacing-space-current-buffer
        "o" 'dir-org
        "g" 'google-translate-at-point
        "G" 'google-translate-at-point-reverse
        "t" 'transparency
        ))
(map! "C-c j" 'org-capture
      "C-c a" 'org-agenda
      "C-c l" 'org-store-link
      "C-c C-j" 'org-journal-new-entry
      )
#+END_SRC

#+RESULTS:

* package
:PROPERTIES:
:header-args: :tangle packages.el
:END:
** header
#+BEGIN_SRC elisp
;; -*- no-byte-compile: t; -*-
(package! sdcv)
(package! emojify)
(package! org-journal)
#+END_SRC


** rime
#+BEGIN_SRC elisp
(package! liberime
  :recipe (:host github
                 :repo "merrickluo/liberime"
                 :files ("CMakeLists.txt" "Makefile" "src" "liberime.el" "liberime-config.el")))
#+END_SRC
** eaf
#+BEGIN_SRC elisp
(package! eaf
  :recipe (:host github
                 :repo "manateelazycat/emacs-application-framework"
                 :files ("*")))
#+END_SRC

** posframe
#+BEGIN_SRC elisp
(package! posframe
  :disable t
  :recipe (:host github
                 :repo "tumashu/posframe"
                 :files ("*")))
#+END_SRC
** emacs-snippets
#+BEGIN_SRC elisp
(package! emacs-snippets :recipe (:host github :repo "hlissner/emacs-snippets" :files ("*")))
#+END_SRC

** google-translate
#+BEGIN_SRC elisp
(package! google-translate
  :recipe (:host github :repo "f279801/google-translate" :branch "#98"))
#+END_SRC
