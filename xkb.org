#+TITLE: xkb

* types
#+BEGIN_EXAMPLE
type "CUST_CAPSLOCK" {
       modifiers= Shift+Mod3;
       map[Shift] = Level2;            // Note that this maps Shift only of {Shift,Lock} to Level2. Alt+Shift will be mapped to Level2
       map[Shift+Mod3] = Level3;       // but Lock+Shift won't map to Level2 even without this line.
       map[Mod3] = Level3;
       level_name[Level1]= "Base";
       level_name[Level2]= "Shift";
       level_name[Level3]= "Mod3";
   };
#+END_EXAMPLE

* compatibility
#+BEGIN_EXAMPLE
interpret Escape+AnyOfOrNone(all) {
        action= SetMods(modifiers=Mod3);
    };
    // interpret Shift_R+AnyOfOrNone(all) {
    //     action= LockMods(modifiers=Mod3);
    // };
    interpret Control_R+AnyOfOrNone(all) {
        action= LockMods(modifiers=Mod3);
    };
    interpret osfLeft {
       repeat= True;
       action = RedirectKey(keycode=<LEFT>, clearmodifiers=Mod3);
    };
    interpret osfRight {
       repeat= True;
       action = RedirectKey(keycode=<RGHT>, clearmodifiers=Mod3);
    };
    interpret osfUp {
       repeat= True;
       action = RedirectKey(keycode=<UP>, clearmodifiers=Mod3);
    };
    interpret osfDown {
       repeat= True;
       action = RedirectKey(keycode=<DOWN>, clearmodifiers=Mod3);
    };
    interpret osfBeginLine{
       repeat= True;
       action = RedirectKey(keycode=<VOL->, clearmodifiers=Mod3);
    };
    interpret osfEndLine{
       repeat= True;
       action = RedirectKey(keycode=<VOL+>, clearmodifiers=Mod3);
    };
    interpret Farsi_1{
       repeat= True;
       action = RedirectKey(keycode=<FK01>, clearmodifiers=Mod3);
    };
    interpret Farsi_2{
       repeat= True;
       action = RedirectKey(keycode=<FK02>, clearmodifiers=Mod3);
    };
    interpret Farsi_3{
       repeat= True;
       action = RedirectKey(keycode=<FK03>, clearmodifiers=Mod3);
    };
    interpret Farsi_4{
       repeat= True;
       action = RedirectKey(keycode=<FK04>, clearmodifiers=Mod3);
    };
    interpret Farsi_5{
       repeat= True;
       action = RedirectKey(keycode=<FK05>, clearmodifiers=Mod3);
    };
    interpret Farsi_6{
       repeat= True;
       action = RedirectKey(keycode=<FK06>, clearmodifiers=Mod3);
    };
    interpret Farsi_7{
       repeat= True;
       action = RedirectKey(keycode=<FK07>, clearmodifiers=Mod3);
    };
    interpret Farsi_8{
       repeat= True;
       action = RedirectKey(keycode=<FK08>, clearmodifiers=Mod3);
    };
    interpret Farsi_9{
       repeat= True;
       action = RedirectKey(keycode=<FK09>, clearmodifiers=Mod3);
    };
    interpret Farsi_0{
       repeat= True;
       action = RedirectKey(keycode=<FK10>, clearmodifiers=Mod3);
    };
    interpret Arabic_percent{
       repeat= True;
       action = RedirectKey(keycode=<FK11>, clearmodifiers=Mod3);
    };
    interpret Arabic_superscript_alef{
       repeat= True;
       action = RedirectKey(keycode=<FK12>, clearmodifiers=Mod3);
    };
    // F4 - F12
    interpret Arabic_tteh{
       repeat= True;
       action = RedirectKey(keycode=<MUTE>, clearmodifiers=Mod3);
    };
    interpret Arabic_peh{
       repeat= True;
       action = RedirectKey(keycode=<I173>, clearmodifiers=Mod3);
    };
    interpret Arabic_tcheh{
       repeat= True;
       action = RedirectKey(keycode=<I172>, clearmodifiers=Mod3);
    };
    interpret Arabic_ddal{
       repeat= True;
       action = RedirectKey(keycode=<I171>, clearmodifiers=Mod3);
    };
    interpret Arabic_rreh{
       repeat= True;
       action = RedirectKey(keycode=<I180>, clearmodifiers=Mod3);
    };
    interpret Arabic_comma{
       repeat= True;
       action = RedirectKey(keycode=<COMP>, clearmodifiers=Mod3);
    };
    interpret Arabic_fullstop{
       repeat= True;
       action = RedirectKey(keycode=<I166>, clearmodifiers=Mod3);
    };
    interpret Arabic_0{
       repeat= True;
       action = RedirectKey(keycode=<I218>, clearmodifiers=Mod3);
    };
    interpret Arabic_1{
       repeat= True;
       action = RedirectKey(keycode=<INS>, clearmodifiers=Mod3);
    };
    interpret Arabic_2{
       repeat= True;
       action = RedirectKey(keycode=<HOME>, clearmodifiers=Mod3);
    };
    interpret Arabic_3{
       repeat= True;
       action = RedirectKey(keycode=<PGUP>, clearmodifiers=Mod3);
    };
    interpret Arabic_4{
       repeat= True;
       action = RedirectKey(keycode=<DELE>, clearmodifiers=Mod3);
    };
    interpret Arabic_5{
       repeat= True;
       action = RedirectKey(keycode=<END>, clearmodifiers=Mod3);
    };
    interpret Arabic_6{
       repeat= True;
       action = RedirectKey(keycode=<PGDN>, clearmodifiers=Mod3);
    };
    interpret Arabic_7{
       repeat= True;
       action = RedirectKey(keycode=<I182>, clearmodifiers=Mod3);
    };
#+END_EXAMPLE
* symbols
#+BEGIN_EXAMPLE
name[group1]="English (US)";

    key  <ESC> {
        type= "CUST_CAPSLOCK",
        symbols[Group1]= [           grave,      asciitilde,       Caps_Lock ]
    };
    key <AE01> {
        type= "CUST_CAPSLOCK",
        symbols[Group1]= [               1,          exclam,         Farsi_1 ]
    };
    key <AE02> {
        type= "CUST_CAPSLOCK",
        symbols[Group1]= [               2,              at,         Farsi_2 ]
    };
    key <AE03> {
        type= "CUST_CAPSLOCK",
        symbols[Group1]= [               3,      numbersign,         Farsi_3 ]
    };
    key <AE04> {
        type= "CUST_CAPSLOCK",
        symbols[Group1]= [               4,          dollar,         Farsi_4 ]
    };
    key <AE05> {
        type= "CUST_CAPSLOCK",
        symbols[Group1]= [               5,         percent,         Farsi_5 ]
    };
    key <AE06> {
        type= "CUST_CAPSLOCK",
        symbols[Group1]= [               6,     asciicircum,         Farsi_6 ]
    };
    key <AE07> {
        type= "CUST_CAPSLOCK",
        symbols[Group1]= [               7,       ampersand,         Farsi_7 ]
    };
    key <AE08> {
        type= "CUST_CAPSLOCK",
        symbols[Group1]= [               8,        asterisk,         Farsi_8 ]
    };
    key <AE09> {
        type= "CUST_CAPSLOCK",
        symbols[Group1]= [               9,       parenleft,         Farsi_9 ]
    };
    key <AE10> {
        type= "CUST_CAPSLOCK",
        symbols[Group1]= [               0,      parenright,         Farsi_0 ]
    };
    key <AE11> {
        type= "CUST_CAPSLOCK",
        symbols[Group1]= [           minus,      underscore,  Arabic_percent ]
    };
    key <AE12> {
        type= "CUST_CAPSLOCK",
        symbols[Group1]= [       equal,     plus,    Arabic_superscript_alef ]
    };
    key <BKSP> {         [       BackSpace,       BackSpace ] };
    key  <TAB> {         [             Tab,    ISO_Left_Tab ] };
    key <AD01> {
        type= "CUST_CAPSLOCK",
        symbols[Group1]= [               q,               Q,        Arabic_1 ]
    };
    key <AD02> {
        type= "CUST_CAPSLOCK",
        symbols[Group1]= [               w,               W,        Arabic_2 ]
    };
    key <AD03> {
        type= "CUST_CAPSLOCK",
        symbols[Group1]= [               e,               E,        Arabic_3 ]
    };
    key <AD04> {
        type= "CUST_CAPSLOCK",
        symbols[Group1]= [               r,               R,     Arabic_rreh ]
    };
    key <AD05> {
        type= "CUST_CAPSLOCK",
        symbols[Group1]= [               t,               T,    Arabic_comma ]
    };
    key <AD06> {
        type= "CUST_CAPSLOCK",
        symbols[Group1]= [               y,               Y, Arabic_fullstop ]
    };
    key <AD07> {
        type= "CUST_CAPSLOCK",
        symbols[Group1]= [               u,               U,      Arabic_peh ]
    };
    key <AD08> {
        type= "CUST_CAPSLOCK",
        symbols[Group1]= [               i,               I,    Arabic_tcheh ]
    };
    key <AD09> {
        type= "CUST_CAPSLOCK",
        symbols[Group1]= [               o,               O,     Arabic_ddal ]
    };
    key <AD10> {
        type= "CUST_CAPSLOCK",
        symbols[Group1]= [               p,               P,     Arabic_tteh ]
    };
    key <AD11> {
        type= "CUST_CAPSLOCK",
        symbols[Group1]= [     bracketleft,       braceleft,    osfBeginLine ]
    };
    key <AD12> {
        type= "CUST_CAPSLOCK",
        symbols[Group1]= [    bracketright,      braceright,      osfEndLine ]
    };
    key <RTRN> {         [          Return ] };
    key <LCTL> {         [       Control_L ] };
    key <AC01> {
        type= "CUST_CAPSLOCK",
        symbols[Group1]= [               a,               A,        Arabic_4 ]
    };
    key <AC02> {
        type= "CUST_CAPSLOCK",
        symbols[Group1]= [               s,               S,        Arabic_5 ]
    };
    key <AC03> {
        type= "CUST_CAPSLOCK",
        symbols[Group1]= [               d,               D,        Arabic_6 ]
    };
    key <AC04> {
        type= "ALPHABETIC",
        symbols[Group1]= [               f,               F,        Arabic_7 ]
    };
    key <AC05> {
        type= "ALPHABETIC",
        symbols[Group1]= [               g,               G ]
    };
    key <AC06> {
        type= "CUST_CAPSLOCK",
        symbols[Group1]= [               h,               H,         osfLeft ]
    };
    key <AC07> {
        type= "CUST_CAPSLOCK",
        symbols[Group1]= [               j,               J,         osfDown ]
    };
    key <AC08> {
        type= "CUST_CAPSLOCK",
        symbols[Group1]= [               k,               K,           osfUp ]
    };
    key <AC09> {
        type= "CUST_CAPSLOCK",
        symbols[Group1]= [               l,               L,        osfRight ]
    };
    key <AC10> {         [       semicolon,           colon ] };
    key <AC11> {         [      apostrophe,        quotedbl ] };
    key <TLDE> {         [           grave,      asciitilde ] };
    key <LFSH> {         [         Shift_L ] };
    key <BKSL> {
        type= "CUST_CAPSLOCK",
        symbols[Group1]= [       backslash,             bar,        Arabic_0 ]
    };
    key <AB01> {
        type= "ALPHABETIC",
        symbols[Group1]= [               z,               Z ]
    };
    key <AB02> {
        type= "ALPHABETIC",
        symbols[Group1]= [               x,               X ]
    };
    key <AB03> {
        type= "ALPHABETIC",
        symbols[Group1]= [               c,               C ]
    };
    key <AB04> {
        type= "ALPHABETIC",
        symbols[Group1]= [               v,               V ]
    };
    key <AB05> {
        type= "ALPHABETIC",
        symbols[Group1]= [               b,               B ]
    };
    key <AB06> {
        type= "ALPHABETIC",
        symbols[Group1]= [               n,               N ]
    };
    key <AB07> {
        type= "ALPHABETIC",
        symbols[Group1]= [               m,               M ]
    };
    key <AB08> {         [           comma,            less ] };
    key <AB09> {         [          period,         greater ] };
    key <AB10> {         [           slash,        question ] };
    key <RTSH> {         [         Shift_R ] };
    key <KPMU> {
        type= "CTRL+ALT",
        symbols[Group1]= [     KP_Multiply,     KP_Multiply,     KP_Multiply,     KP_Multiply,   XF86ClearGrab ]
    };
    key <LALT> {         [           Alt_L,          Meta_L ] };
    key <SPCE> {         [           space ] };
    key <CAPS> {         [          Escape ] };
    key <FK01> {
        type= "CTRL+ALT",
        symbols[Group1]= [              F1,              F1,              F1,              F1, XF86Switch_VT_1 ]
    };
    key <FK02> {
        type= "CTRL+ALT",
        symbols[Group1]= [              F2,              F2,              F2,              F2, XF86Switch_VT_2 ]
    };
    key <FK03> {
        type= "CTRL+ALT",
        symbols[Group1]= [              F3,              F3,              F3,              F3, XF86Switch_VT_3 ]
    };
    key <FK04> {
        type= "CTRL+ALT",
        symbols[Group1]= [              F4,              F4,              F4,              F4, XF86Switch_VT_4 ]
    };
    key <FK05> {
        type= "CTRL+ALT",
        symbols[Group1]= [              F5,              F5,              F5,              F5, XF86Switch_VT_5 ]
    };
    key <FK06> {
        type= "CTRL+ALT",
        symbols[Group1]= [              F6,              F6,              F6,              F6, XF86Switch_VT_6 ]
    };
    key <FK07> {
        type= "CTRL+ALT",
        symbols[Group1]= [              F7,              F7,              F7,              F7, XF86Switch_VT_7 ]
    };
    key <FK08> {
        type= "CTRL+ALT",
        symbols[Group1]= [              F8,              F8,              F8,              F8, XF86Switch_VT_8 ]
    };
    key <FK09> {
        type= "CTRL+ALT",
        symbols[Group1]= [              F9,              F9,              F9,              F9, XF86Switch_VT_9 ]
    };
    key <FK10> {
        type= "CTRL+ALT",
        symbols[Group1]= [             F10,             F10,             F10,             F10, XF86Switch_VT_10 ]
    };
    key <NMLK> {         [        Num_Lock ] };
    key <SCLK> {         [     Scroll_Lock ] };
    key  <KP7> {         [         KP_Home,            KP_7 ] };
    key  <KP8> {         [           KP_Up,            KP_8 ] };
    key  <KP9> {         [        KP_Prior,            KP_9 ] };
    key <KPSU> {
        type= "CTRL+ALT",
        symbols[Group1]= [     KP_Subtract,     KP_Subtract,     KP_Subtract,     KP_Subtract,  XF86Prev_VMode ]
    };
    key  <KP4> {         [         KP_Left,            KP_4 ] };
    key  <KP5> {         [        KP_Begin,            KP_5 ] };
    key  <KP6> {         [        KP_Right,            KP_6 ] };
    key <KPAD> {
        type= "CTRL+ALT",
        symbols[Group1]= [          KP_Add,          KP_Add,          KP_Add,          KP_Add,  XF86Next_VMode ]
    };
    key  <KP1> {         [          KP_End,            KP_1 ] };
    key  <KP2> {         [         KP_Down,            KP_2 ] };
    key  <KP3> {         [         KP_Next,            KP_3 ] };
    key  <KP0> {         [       KP_Insert,            KP_0 ] };
    key <KPDL> {         [       KP_Delete,      KP_Decimal ] };
    key <LVL3> {         [ ISO_Level3_Shift ] };
    key <LSGT> {
        type= "FOUR_LEVEL",
        symbols[Group1]= [            less,         greater,             bar,       brokenbar ]
    };
    key <FK11> {
        type= "CTRL+ALT",
        symbols[Group1]= [             F11,             F11,             F11,             F11, XF86Switch_VT_11 ]
    };
    key <FK12> {
        type= "CTRL+ALT",
        symbols[Group1]= [             F12,             F12,             F12,             F12, XF86Switch_VT_12 ]
    };
    key <KATA> {         [        Katakana ] };
    key <HIRA> {         [        Hiragana ] };
    key <HENK> {         [     Henkan_Mode ] };
    key <HKTG> {         [ Hiragana_Katakana ] };
    key <MUHE> {         [        Muhenkan ] };
    key <KPEN> {         [        KP_Enter ] };
    key <RCTL> {         [       Control_R ] };
    key <KPDV> {
        type= "CTRL+ALT",
        symbols[Group1]= [       KP_Divide,       KP_Divide,       KP_Divide,       KP_Divide,      XF86Ungrab ]
    };
    key <PRSC> {
        type= "PC_ALT_LEVEL2",
        symbols[Group1]= [           Print,         Sys_Req ]
    };
    key <RALT> {
        // type= "TWO_LEVEL",
        symbols[Group1]= [           Alt_R,          Meta_R ]
        // symbols[Group1]= [            Mode_switch,          Meta_R ]
    };
    key <LNFD> {         [        Linefeed ] };
    key <HOME> {         [            Home ] };
    key   <UP> {         [              Up ] };
    key <PGUP> {         [           Prior ] };
    key <LEFT> {         [            Left ] };
    key <RGHT> {         [           Right ] };
    key  <END> {         [             End ] };
    key <DOWN> {         [            Down ] };
    key <PGDN> {         [            Next ] };
    key  <INS> {         [          Insert ] };
    key <DELE> {         [          Delete ] };
    key <MUTE> {         [   XF86AudioMute ] };
    key <VOL-> {         [ XF86AudioLowerVolume ] };
    key <VOL+> {         [ XF86AudioRaiseVolume ] };
    key <POWR> {         [    XF86PowerOff ] };
    key <KPEQ> {         [        KP_Equal ] };
    key <I126> {         [       plusminus ] };
    key <PAUS> {
        type= "PC_CONTROL_LEVEL2",
        symbols[Group1]= [           Pause,           Break ]
    };
    key <I128> {         [     XF86LaunchA ] };
    key <I129> {         [      KP_Decimal,      KP_Decimal ] };
    key <HNGL> {         [          Hangul ] };
    key <HJCV> {         [    Hangul_Hanja ] };
    key <LWIN> {         [         Super_L ] };
    key <RWIN> {         [         Super_R ] };
    key <COMP> {         [            Menu ] };
    key <STOP> {         [          Cancel ] };
    key <AGAI> {         [            Redo ] };
    key <PROP> {         [        SunProps ] };
    key <UNDO> {         [            Undo ] };
    key <FRNT> {         [        SunFront ] };
    key <COPY> {         [        XF86Copy ] };
    key <OPEN> {         [        XF86Open ] };
    key <PAST> {         [       XF86Paste ] };
    key <FIND> {         [            Find ] };
    key  <CUT> {         [         XF86Cut ] };
    key <HELP> {         [            Help ] };
    key <I147> {         [      XF86MenuKB ] };
    key <I148> {         [  XF86Calculator ] };
    key <I150> {         [       XF86Sleep ] };
    key <I151> {         [      XF86WakeUp ] };
    key <I152> {         [    XF86Explorer ] };
    key <I153> {         [        XF86Send ] };
    key <I155> {         [        XF86Xfer ] };
    key <I156> {         [     XF86Launch1 ] };
    key <I157> {         [     XF86Launch2 ] };
    key <I158> {         [         XF86WWW ] };
    key <I159> {         [         XF86DOS ] };
    key <I160> {         [ XF86ScreenSaver ] };
    key <I161> {         [ XF86RotateWindows ] };
    key <I162> {         [    XF86TaskPane ] };
    key <I163> {         [        XF86Mail ] };
    key <I164> {         [   XF86Favorites ] };
    key <I165> {         [  XF86MyComputer ] };
    key <I166> {         [        XF86Back ] };
    key <I167> {         [     XF86Forward ] };
    key <I169> {         [       XF86Eject ] };
    key <I170> {         [       XF86Eject,       XF86Eject ] };
    key <I171> {         [   XF86AudioNext ] };
    key <I172> {         [   XF86AudioPlay,  XF86AudioPause ] };
    key <I173> {         [   XF86AudioPrev ] };
    key <I174> {         [   XF86AudioStop,       XF86Eject ] };
    key <I175> {         [ XF86AudioRecord ] };
    key <I176> {         [ XF86AudioRewind ] };
    key <I177> {         [       XF86Phone ] };
    key <I179> {         [       XF86Tools ] };
    key <I180> {         [    XF86HomePage ] };
    key <I181> {         [      XF86Reload ] };
    key <I182> {         [       XF86Close ] };
    key <I185> {         [    XF86ScrollUp ] };
    key <I186> {         [  XF86ScrollDown ] };
    key <I187> {         [       parenleft ] };
    key <I188> {         [      parenright ] };
    key <I189> {         [         XF86New ] };
    key <I190> {         [            Redo ] };
    key <FK13> {         [       XF86Tools ] };
    key <FK14> {         [     XF86Launch5 ] };
    key <FK15> {         [     XF86Launch6 ] };
    key <FK16> {         [     XF86Launch7 ] };
    key <FK17> {         [     XF86Launch8 ] };
    key <FK18> {         [     XF86Launch9 ] };
    key <FK20> {         [ XF86AudioMicMute ] };
    key <FK21> {         [ XF86TouchpadToggle ] };
    key <FK22> {         [  XF86TouchpadOn ] };
    key <FK23> {         [ XF86TouchpadOff ] };
    key <MDSW> {         [     Mode_switch ] };
    key  <ALT> {         [        NoSymbol,           Alt_L ] };
    key <META> {         [        NoSymbol,          Meta_L ] };
    key <SUPR> {         [        NoSymbol,         Super_L ] };
    key <HYPR> {         [        NoSymbol,         Hyper_L ] };
    key <I208> {         [   XF86AudioPlay ] };
    key <I209> {         [  XF86AudioPause ] };
    key <I210> {         [     XF86Launch3 ] };
    key <I211> {         [     XF86Launch4 ] };
    key <I212> {         [     XF86LaunchB ] };
    key <I213> {         [     XF86Suspend ] };
    key <I214> {         [       XF86Close ] };
    key <I215> {         [   XF86AudioPlay ] };
    key <I216> {         [ XF86AudioForward ] };
    key <I218> {         [           Print ] };
    key <I220> {         [      XF86WebCam ] };
    key <I221> {         [ XF86AudioPreset ] };
    key <I223> {         [        XF86Mail ] };
    key <I224> {         [   XF86Messenger ] };
    key <I225> {         [      XF86Search ] };
    key <I226> {         [          XF86Go ] };
    key <I227> {         [     XF86Finance ] };
    key <I228> {         [        XF86Game ] };
    key <I229> {         [        XF86Shop ] };
    key <I231> {         [          Cancel ] };
    key <I232> {         [ XF86MonBrightnessDown ] };
    key <I233> {         [ XF86MonBrightnessUp ] };
    key <I234> {         [  XF86AudioMedia ] };
    key <I235> {         [     XF86Display ] };
    key <I236> {         [ XF86KbdLightOnOff ] };
    key <I237> {         [ XF86KbdBrightnessDown ] };
    key <I238> {         [ XF86KbdBrightnessUp ] };
    key <I239> {         [        XF86Send ] };
    key <I240> {         [       XF86Reply ] };
    key <I241> {         [ XF86MailForward ] };
    key <I242> {         [        XF86Save ] };
    key <I243> {         [   XF86Documents ] };
    key <I244> {         [     XF86Battery ] };
    key <I245> {         [   XF86Bluetooth ] };
    key <I246> {         [        XF86WLAN ] };
    key <I251> {         [ XF86MonBrightnessCycle ] };
    key <I254> {         [        XF86WWAN ] };
    key <I255> {         [      XF86RFKill ] };
    modifier_map Control { <LCTL> };
    modifier_map Shift { <LFSH> };
    modifier_map Shift { <RTSH> };
    modifier_map Mod1 { <LALT> };
    // modifier_map Lock { <ESC> };
    modifier_map Mod3 { <CAPS> };
    // modifier_map Mod2 { <NMLK> };
    modifier_map Mod5 { <LVL3> };
    // modifier_map Mod5 { <RALT> };
    // modifier_map Control { <RCTL> };
    modifier_map Mod3 { <RCTL> };
    // modifier_map Mod1 { <RALT> };
    // modifier_map Mod2 { <RALT> };
    modifier_map Mod4 { <LWIN> };
    modifier_map Mod4 { <RWIN> };
    modifier_map Mod5 { <MDSW> };
    modifier_map Mod1 { <META> };
    modifier_map Mod4 { <SUPR> };
    modifier_map Mod4 { <HYPR> };
#+END_EXAMPLE
